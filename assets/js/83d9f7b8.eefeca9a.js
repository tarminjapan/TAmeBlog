"use strict";(self.webpackChunkt_ame_blog=self.webpackChunkt_ame_blog||[]).push([[2486],{4765:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/04/01/2025/04/first","metadata":{"permalink":"/TAmeBlog/blog/2025/04/01/2025/04/first","source":"@site/blog/2025/04/2025-04-01-first.md","title":"AtCoder ABC284 C - Count Connected Components \u89e3\u8aac","description":"\u554f\u984c\u30da\u30fc\u30b8:","date":"2025-04-01T00:00:00.000Z","tags":[{"inline":true,"label":"AtCoder","permalink":"/TAmeBlog/blog/tags/at-coder"},{"inline":true,"label":"ABC284","permalink":"/TAmeBlog/blog/tags/abc-284"},{"inline":true,"label":"C","permalink":"/TAmeBlog/blog/tags/c"},{"inline":true,"label":"\u30b0\u30e9\u30d5","permalink":"/TAmeBlog/blog/tags/\u30b0\u30e9\u30d5"},{"inline":true,"label":"BFS","permalink":"/TAmeBlog/blog/tags/bfs"},{"inline":true,"label":"\u9023\u7d50\u6210\u5206","permalink":"/TAmeBlog/blog/tags/\u9023\u7d50\u6210\u5206"}],"readingTime":2.28,"hasTruncateMarker":true,"authors":[{"name":"TAmemiya","title":"Small fry IT technician","imageURL":"https://github.com/tarminjapan.png","key":"tame","page":null}],"frontMatter":{"title":"AtCoder ABC284 C - Count Connected Components \u89e3\u8aac","date":"2025-04-01T00:00:00.000Z","authors":["tame"],"tags":["AtCoder","ABC284","C","\u30b0\u30e9\u30d5","BFS","\u9023\u7d50\u6210\u5206"]},"unlisted":false},"content":"\x3c!-- truncate --\x3e\\n\\n# C - Count Connected Components\\n\\n**\u554f\u984c\u30da\u30fc\u30b8:**\\n[https://atcoder.jp/contests/abc284/tasks/abc284_c](https://atcoder.jp/contests/abc284/tasks/abc284_c)\\n\\n**\u63d0\u51fa\u30b3\u30fc\u30c9:**\\n[https://atcoder.jp/contests/abc284/submissions/64422892](https://atcoder.jp/contests/abc284/submissions/64422892)\\n\\n## \u65b9\u91dd\\n\\n\u5358\u7d14\u7121\u5411\u30b0\u30e9\u30d5\u306e\u9023\u7d50\u6210\u5206\u3092\u6570\u3048\u308b\u554f\u984c\u3067\u3059\u3002\\n\u5168\u3066\u306e\u9802\u70b9 $i \\\\left(1\\\\leq i \\\\leq N\\\\right)$ \u306b\u3064\u3044\u3066\u3001\u307e\u3060\u8a2a\u554f\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u305d\u306e\u9802\u70b9\u3092\u958b\u59cb\u70b9\u3068\u3057\u3066BFS\uff08\u5e45\u512a\u5148\u63a2\u7d22\uff09\u3092\u5b9f\u884c\u3057\u3001\u9023\u7d50\u3057\u3066\u3044\u308b\u9802\u70b9\u3092\u8a2a\u308c\u307e\u3059\u3002\\n\\n- \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5168\u4f53\u3092\u901a\u3057\u3066\u3001\u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e `HashSet` \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\\n- \u5404\u9802\u70b9 $i$ \u3092\u8abf\u3079\u308b\u969b\u306b\u3001\u305d\u306e\u9802\u70b9\u304c\u65e2\u306b `HashSet` \u306b\u5b58\u5728\u3059\u308b\u5834\u5408\uff08\u8a2a\u554f\u6e08\u307f\u306e\u5834\u5408\uff09\u306f\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\uff08\u672a\u8a2a\u554f\u306e\uff09\u5834\u5408\u306f\u3001\u305d\u306e\u9802\u70b9\u3092\u958b\u59cb\u70b9\u3068\u3057\u3066BFS\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\\n- \u672a\u8a2a\u554f\u306e\u9802\u70b9 $i$ \u304b\u3089BFS\u306b\u3088\u308b\u8d70\u67fb\u3092\u958b\u59cb\u3059\u308b\u5834\u5408\u306b\u3001\u9023\u7d50\u6210\u5206\u306e\u30ab\u30a6\u30f3\u30c8\u3092 $1$ \u5897\u3084\u3057\u307e\u3059\u3002\\n\\n\u5168\u3066\u306e\u8d70\u67fb\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\\n\\n## \u5b9f\u88c5\\n\\n```csharp\\n// \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\u3002\\nvar inputs = ReadLine.Ints();\\nint N = inputs[0], M = inputs[1];\\nvar UV = ReadLine.IntMatrix(M);\\n\\n// \u5358\u7d14\u7121\u5411\u30b0\u30e9\u30d5\u306e\u6e96\u5099\u3068\u3001\u8a2a\u554f\u6e08\u307f\u9802\u70b9\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e HashSet \u3092\u4f5c\u6210\u3059\u308b\u3002\\nvar sug = new SimpleUndirectedGraph(N, UV);\\nvar ans = 0;\\nvar set = new HashSet<int>();\\n\\n// \u5168\u3066\u306e\u9802\u70b9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u672a\u8a2a\u554f\u306a\u3089\u958b\u59cb\u5730\u70b9\u3068\u3057\u3066BFS\u3092\u5b9f\u884c\u3059\u308b\u3002\\nfor (int i = 1; i <= N; i++)\\n{\\n    // \u958b\u59cb\u5730\u70b9\u304c\u3001\u65e2\u306b\u8a2a\u308c\u305f\u9802\u70b9\u306e\u5834\u5408\u306f\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\\n    if (set.Contains(i))\\n        continue;\\n\\n    // \u65b0\u3057\u3044\u9023\u7d50\u6210\u5206\u304c\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u3002\\n    ans++; \\n\\n    // BFS\u3092\u5b9f\u884c\u3059\u308b\u3002\\n    var queue = new Queue<int>();\\n    queue.Enqueue(i);\\n\\n    while (queue.TryDequeue(out var cv))\\n    {\\n        // \u65e2\u306b\u8a2a\u308c\u305f\u9802\u70b9\u306f\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\\n        if (set.Contains(cv))\\n            continue;\\n\\n        set.Add(cv);\\n\\n        foreach (var nv in sug.GetVertices(cv))\\n            queue.Enqueue(nv);\\n    }\\n}\\n\\n// \u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3002\\nConsole.WriteLine(ans);\\n```"}]}}')}}]);