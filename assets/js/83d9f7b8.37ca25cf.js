"use strict";(self.webpackChunkt_ame_blog=self.webpackChunkt_ame_blog||[]).push([[2486],{4765:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/04/02/2025/04/abs274_d","metadata":{"permalink":"/TAmeBlog/blog/2025/04/02/2025/04/abs274_d","source":"@site/blog/2025/04/2025-04-02-abs274_d.md","title":"AtCoder ABC274 D - Robot Arms 2 \u89e3\u8aac","description":"\u554f\u984c\u30da\u30fc\u30b8:","date":"2025-04-02T00:00:00.000Z","tags":[{"inline":true,"label":"AtCoder","permalink":"/TAmeBlog/blog/tags/at-coder"},{"inline":true,"label":"ABC274","permalink":"/TAmeBlog/blog/tags/abc-274"},{"inline":true,"label":"D","permalink":"/TAmeBlog/blog/tags/d"},{"inline":true,"label":"DP","permalink":"/TAmeBlog/blog/tags/dp"},{"inline":true,"label":"\u52d5\u7684\u8a08\u753b\u6cd5","permalink":"/TAmeBlog/blog/tags/\u52d5\u7684\u8a08\u753b\u6cd5"},{"inline":true,"label":"\u5076\u5947\u6027","permalink":"/TAmeBlog/blog/tags/\u5076\u5947\u6027"}],"readingTime":4.755,"hasTruncateMarker":true,"authors":[{"name":"TAmemiya","title":"Small fry IT technician","imageURL":"https://github.com/tarminjapan.png","key":"tame","page":null}],"frontMatter":{"title":"AtCoder ABC274 D - Robot Arms 2 \u89e3\u8aac","date":"2025-04-02T00:00:00.000Z","authors":["tame"],"tags":["AtCoder","ABC274","D","DP","\u52d5\u7684\u8a08\u753b\u6cd5","\u5076\u5947\u6027"]},"unlisted":false,"nextItem":{"title":"AtCoder ABC284 C - Count Connected Components \u89e3\u8aac","permalink":"/TAmeBlog/blog/2025/04/01/2025/04/_abc284_c"}},"content":"\x3c!-- truncate --\x3e\\n\\n# D - Robot Arms 2\\n\\n**\u554f\u984c\u30da\u30fc\u30b8:** <https://atcoder.jp/contests/abc274/tasks/abc274_d>\\n\\n**\u63d0\u51fa\u30b3\u30fc\u30c9:** <https://atcoder.jp/contests/abc274/submissions/64427383>\\n\\n## \u65b9\u91dd\\n\\n$X$\u3000\u5ea7\u6a19\u306e\u79fb\u52d5\u3068 $Y$ \u5ea7\u6a19\u306e\u79fb\u52d5\u306f\u72ec\u7acb\u3057\u3066\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\\n\\n$X$\u3000\u5ea7\u6a19\u306e\u79fb\u52d5\u3092\u4f8b\u306b\u3057\u307e\u3059\u3002\\n\\nDP\u3092\u4f7f\u3063\u3066\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u5230\u9054\u53ef\u80fd\u306a\u5ea7\u6a19\u306e\u96c6\u5408\u3092\u6c42\u3081\u3066\u3044\u304d\u3001\u6700\u7d42\u7684\u306b\u76ee\u6a19\u5ea7\u6a19 $X$ \uff08\u307e\u305f\u306f $Y$ \uff09\u304c\u305d\u306e\u96c6\u5408\u306b\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u3001\u5230\u9054\u53ef\u80fd\u3067\u3042\u308b\u3068\u5224\u65ad\u3067\u304d\u307e\u3059\u3002\u4e21\u65b9\u306e\u5ea7\u6a19\u306b\u3064\u3044\u3066\u5230\u9054\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\u7b54\u3048\u306f `Yes` \u3068\u306a\u308a\u307e\u3059\u3002\\n\\n$X$ \u5ea7\u6a19\u306e\u79fb\u52d5\u306b\u304b\u304b\u308f\u308b\u306e\u306f\u3001 $A_n (n \\\\equiv 1 \\\\pmod 2) $ \u3067\u3059\u3002\u305f\u3060\u3057\u3001\u6700\u521d\u306e\u79fb\u52d5 $A_1$ \u306f\u3000$+X $ \u65b9\u5411\u306b\u56fa\u5b9a\u3055\u308c\u3001\u521d\u671f\u4f4d\u7f6e\u3068\u306a\u308a\u307e\u3059\u3002\\n\\n| $n$ | \u8003\u3048\u3089\u308c\u308b $X$ \u5ea7\u6a19\u306e\u7d44\u307f\u5408\u308f\u305b | \u7d44\u307f\u5408\u308f\u305b\u306e\u500b\u6570 |\\n|-|-|-|\\n| $1$ | $A_1$ | $1$ |\\n| $3$ | $A_1 + A_3, A_1 - A_3$  | $2$ |\\n| $5$ | $A_1 + A_3 + A_5, A_1 + A_3 - A_5, A_1 - A_3 + A_5, A_1 - A_3 - A_5$  | $4$ |\\n\\n$X$ \u5ea7\u6a19\u306b\u3064\u3044\u3066\u3001$A_3, A_5, \\\\dots$ \u3068\u79fb\u52d5\u304c\u5897\u3048\u308b\u305f\u3073\u306b\u3001\u5230\u9054\u53ef\u80fd\u306a\u5ea7\u6a19\u306e\u7a2e\u985e\u306e\u6570\u306f\u6700\u5927\u3067 $2$ \u500d\u306b\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5165\u529b\u5024\u306e\u5236\u7d04 ($1 \\\\le N \\\\le 1000$, $1 \\\\le A_i \\\\le 10$, $|x|, |y| \\\\le 10^4$) \u304b\u3089\u3001\u5230\u9054\u53ef\u80fd\u306a\u5ea7\u6a19\u306e\u7d76\u5bfe\u5024\u306f $\\\\sum A_i \\\\le 10000$ \u3092\u8d85\u3048\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u4f8b\u3048\u3070 $X$ \u5ea7\u6a19\u306b\u3064\u3044\u3066\u306f $[-10000, 10000]$ \u306e\u7bc4\u56f2\u3067\u8003\u3048\u308c\u3070\u5341\u5206\u3067\u3059\u3002\\n\\n\uff08\u5b9f\u88c5\u3067\u306f\u3001 $[-10010, 10010]$ \u306e\u7bc4\u56f2\u5916\u306e\u5ea7\u6a19\u3092\u7121\u8996\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3002\u3002\uff09\\n\\n\u3057\u305f\u304c\u3063\u3066\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u4fdd\u6301\u3059\u3079\u304d $X$ \u5ea7\u6a19\u306e\u7a2e\u985e\uff08\u72b6\u614b\u6570\uff09\u306e\u6700\u5927\u6570\u306f\u3001\u7bc4\u56f2\u3092 $[-10000, 10000]$ \u3068\u3059\u308b\u3068 $10000 - (-10000) + 1 = 20001$ \u901a\u308a\u306b\u6291\u3048\u3089\u308c\u307e\u3059\u3002$X$ \u5ea7\u6a19\u306e\u79fb\u52d5\u56de\u6570\u306f\u6700\u5927\u3067\u7d04 $N/2$ \u56de\u306a\u306e\u3067\u3001$X$ \u5ea7\u6a19\u306b\u95a2\u3059\u308b\u8a08\u7b97\u91cf\u306f $O(N \\\\times (\\\\text{\u5ea7\u6a19\u7bc4\u56f2})) \\\\approx O(20000N)$ \u3068\u306a\u308a\u307e\u3059\u3002\\n\\n$Y$ \u5ea7\u6a19\u306b\u3064\u3044\u3066\u3082\u3001$X$ \u5ea7\u6a19\u3068\u540c\u69d8\u306bDP\u3067\u5230\u9054\u53ef\u80fd\u306a\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002$Y$ \u5ea7\u6a19\u306e\u79fb\u52d5\u306b\u95a2\u308f\u308b\u306e\u306f $A_2, A_4, A_6, \\\\dots$ \u3067\u3059\u3002\u521d\u671f\u4f4d\u7f6e\u306f $0$ \u3067\u3042\u308a\u3001$X$ \u5ea7\u6a19\u306e\u5834\u5408\u3068\u7570\u306a\u308a\u3001\u6700\u521d\u306e\u79fb\u52d5 $A_2$ \u304b\u3089\u6b63\u8ca0\u3069\u3061\u3089\u306e\u65b9\u5411\u306b\u3082\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002\u8a08\u7b97\u91cf\u3082\u540c\u69d8\u306b $O(N \\\\times (\\\\text{\u5ea7\u6a19\u7bc4\u56f2}))$ \u3068\u306a\u308a\u307e\u3059\u3002\\n\\n## \u5b9f\u88c5\\n\\n```csharp\\npublic static void Run()\\n{\\n    // \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\u3002\\n    var inputs = ReadLine.Ints();\\n    int N = inputs[0], X = inputs[1], Y = inputs[2];\\n    var A = ReadLine.Ints();\\n\\n    // A\u304b\u3089X\u5ea7\u6a19\u3068Y\u5ea7\u6a19\u306e\u79fb\u52d5\u306b\u5206\u3051\u308b\u3002\\n    var xnums = A.Where((n, i) => i != 0 && i % 2 == 0).ToArray(); // \u6700\u521d\u306eX\u8ef8\u306e\u79fb\u52d5\u306f\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u3068\u3059\u308b\u305f\u3081\u7121\u8996\u3059\u308b\u3002\\n    var ynums = A.Where((n, i) => i % 2 == 1).ToArray();\\n\\n    // \u30b4\u30fc\u30eb\u5ea7\u6a19\u306b\u305f\u3069\u308a\u7740\u3051\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\\n    var xres = CanGoal(X, A[0], xnums);\\n    var yres = CanGoal(Y, 0, ynums);\\n\\n    // \u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3002\\n    Console.WriteLine(xres && yres ? \\"Yes\\" : \\"No\\");\\n}\\n\\npublic static bool CanGoal(int g, int s, int[] nums)\\n{\\n    // DP\u3067\u7ba1\u7406\u3059\u308b\u5ea7\u6a19\u306e\u7bc4\u56f2\uff08\u4e0a\u9650\u3068\u4e0b\u9650\uff09\\n    var max = 10010;\\n    var min = -10010;\\n\\n    // DP\u3092\u5b9f\u884c\u3057\u3066\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u5230\u9054\u53ef\u80fd\u306a\u5ea7\u6a19\u306e\u96c6\u5408\u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\u3002\\n    var dp = Matrix<int>.CreateDictionary(nums.Length + 1);\\n    dp[0].Add(s);\\n\\n    for (int i = 0; i < nums.Length; i++)\\n        foreach (var c in dp[i])\\n        {\\n            var n1 = c + nums[i];\\n            var n2 = c - nums[i];\\n\\n            // \u8a08\u7b97\u7d50\u679c\u304c\u5ea7\u6a19\u306e\u7bc4\u56f2\u5185\u3067\u3042\u308c\u3070\u3001\u6b21\u306e\u30b9\u30c6\u30c3\u30d7(i+1)\u3067\u5230\u9054\u53ef\u80fd\u306a\u5ea7\u6a19\u3068\u3057\u3066\u8a18\u9332\u3059\u308b\u3002\\n            if (min <= n1 && n1 <= max)\\n                dp[i + 1].Add(n1);\\n\\n            if (min <= n2 && n2 <= max)\\n                dp[i + 1].Add(n2);\\n        }\\n\\n    // \u5168\u3066\u306e\u79fb\u52d5\u3092\u7d42\u3048\u305f\u5f8c\u3001\u76ee\u6a19\u5ea7\u6a19 (g) \u306b\u5230\u9054\u53ef\u80fd\u3067\u3042\u308c\u3070 True \u3092\u8fd4\u3059\u3002\\n    return dp[nums.Length].Contains(g);\\n}\\n```"},{"id":"/2025/04/01/2025/04/_abc284_c","metadata":{"permalink":"/TAmeBlog/blog/2025/04/01/2025/04/_abc284_c","source":"@site/blog/2025/04/2025-04-01_abc284_c.md","title":"AtCoder ABC284 C - Count Connected Components \u89e3\u8aac","description":"\u554f\u984c\u30da\u30fc\u30b8//atcoder.jp/contests/abc284/tasks/abc284c","date":"2025-04-01T00:00:00.000Z","tags":[{"inline":true,"label":"AtCoder","permalink":"/TAmeBlog/blog/tags/at-coder"},{"inline":true,"label":"ABC284","permalink":"/TAmeBlog/blog/tags/abc-284"},{"inline":true,"label":"C","permalink":"/TAmeBlog/blog/tags/c"},{"inline":true,"label":"\u30b0\u30e9\u30d5","permalink":"/TAmeBlog/blog/tags/\u30b0\u30e9\u30d5"},{"inline":true,"label":"BFS","permalink":"/TAmeBlog/blog/tags/bfs"},{"inline":true,"label":"\u9023\u7d50\u6210\u5206","permalink":"/TAmeBlog/blog/tags/\u9023\u7d50\u6210\u5206"}],"readingTime":2.28,"hasTruncateMarker":true,"authors":[{"name":"TAmemiya","title":"Small fry IT technician","imageURL":"https://github.com/tarminjapan.png","key":"tame","page":null}],"frontMatter":{"title":"AtCoder ABC284 C - Count Connected Components \u89e3\u8aac","date":"2025-04-01T00:00:00.000Z","authors":["tame"],"tags":["AtCoder","ABC284","C","\u30b0\u30e9\u30d5","BFS","\u9023\u7d50\u6210\u5206"]},"unlisted":false,"prevItem":{"title":"AtCoder ABC274 D - Robot Arms 2 \u89e3\u8aac","permalink":"/TAmeBlog/blog/2025/04/02/2025/04/abs274_d"}},"content":"\x3c!-- truncate --\x3e\\n\\n# C - Count Connected Components\\n\\n**\u554f\u984c\u30da\u30fc\u30b8:** [https://atcoder.jp/contests/abc284/tasks/abc284_c](https://atcoder.jp/contests/abc284/tasks/abc284_c)\\n\\n**\u63d0\u51fa\u30b3\u30fc\u30c9:** [https://atcoder.jp/contests/abc284/submissions/64422892](https://atcoder.jp/contests/abc284/submissions/64422892)\\n\\n## \u65b9\u91dd\\n\\n\u5358\u7d14\u7121\u5411\u30b0\u30e9\u30d5\u306e\u9023\u7d50\u6210\u5206\u3092\u6570\u3048\u308b\u554f\u984c\u3067\u3059\u3002\\n\u5168\u3066\u306e\u9802\u70b9 $i \\\\left(1\\\\leq i \\\\leq N\\\\right)$ \u306b\u3064\u3044\u3066\u3001\u307e\u3060\u8a2a\u554f\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u305d\u306e\u9802\u70b9\u3092\u958b\u59cb\u70b9\u3068\u3057\u3066BFS\uff08\u5e45\u512a\u5148\u63a2\u7d22\uff09\u3092\u5b9f\u884c\u3057\u3001\u9023\u7d50\u3057\u3066\u3044\u308b\u9802\u70b9\u3092\u8a2a\u308c\u307e\u3059\u3002\\n\\n- \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5168\u4f53\u3092\u901a\u3057\u3066\u3001\u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e `HashSet` \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\\n- \u5404\u9802\u70b9 $i$ \u3092\u8abf\u3079\u308b\u969b\u306b\u3001\u305d\u306e\u9802\u70b9\u304c\u65e2\u306b `HashSet` \u306b\u5b58\u5728\u3059\u308b\u5834\u5408\uff08\u8a2a\u554f\u6e08\u307f\u306e\u5834\u5408\uff09\u306f\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\uff08\u672a\u8a2a\u554f\u306e\uff09\u5834\u5408\u306f\u3001\u305d\u306e\u9802\u70b9\u3092\u958b\u59cb\u70b9\u3068\u3057\u3066BFS\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\\n- \u672a\u8a2a\u554f\u306e\u9802\u70b9 $i$ \u304b\u3089BFS\u306b\u3088\u308b\u8d70\u67fb\u3092\u958b\u59cb\u3059\u308b\u5834\u5408\u306b\u3001\u9023\u7d50\u6210\u5206\u306e\u30ab\u30a6\u30f3\u30c8\u3092 $1$ \u5897\u3084\u3057\u307e\u3059\u3002\\n\\n\u5168\u3066\u306e\u8d70\u67fb\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\\n\\n## \u5b9f\u88c5\\n\\n```csharp\\n// \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\u3002\\nvar inputs = ReadLine.Ints();\\nint N = inputs[0], M = inputs[1];\\nvar UV = ReadLine.IntMatrix(M);\\n\\n// \u5358\u7d14\u7121\u5411\u30b0\u30e9\u30d5\u306e\u6e96\u5099\u3068\u3001\u8a2a\u554f\u6e08\u307f\u9802\u70b9\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e HashSet \u3092\u4f5c\u6210\u3059\u308b\u3002\\nvar sug = new SimpleUndirectedGraph(N, UV);\\nvar ans = 0;\\nvar set = new HashSet<int>();\\n\\n// \u5168\u3066\u306e\u9802\u70b9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u672a\u8a2a\u554f\u306a\u3089\u958b\u59cb\u5730\u70b9\u3068\u3057\u3066BFS\u3092\u5b9f\u884c\u3059\u308b\u3002\\nfor (int i = 1; i <= N; i++)\\n{\\n    // \u958b\u59cb\u5730\u70b9\u304c\u3001\u65e2\u306b\u8a2a\u308c\u305f\u9802\u70b9\u306e\u5834\u5408\u306f\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\\n    if (set.Contains(i))\\n        continue;\\n\\n    // \u65b0\u3057\u3044\u9023\u7d50\u6210\u5206\u304c\u898b\u3064\u304b\u3063\u305f\u306e\u3067\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u3002\\n    ans++;\\n\\n    // BFS\u3092\u5b9f\u884c\u3059\u308b\u3002\\n    var queue = new Queue<int>();\\n    queue.Enqueue(i);\\n\\n    while (queue.TryDequeue(out var cv))\\n    {\\n        // \u65e2\u306b\u8a2a\u308c\u305f\u9802\u70b9\u306f\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\\n        if (set.Contains(cv))\\n            continue;\\n\\n        set.Add(cv);\\n\\n        foreach (var nv in sug.GetVertices(cv))\\n            queue.Enqueue(nv);\\n    }\\n}\\n\\n// \u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3002\\nConsole.WriteLine(ans);\\n```"}]}}')}}]);